import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.ClassWriter;
import visitor.ClassVisitorFactory;
import visitor.TestClassVisitor;

import java.io.*;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

/**
 * Created by qtfreet on 2017/3/14.
 */
public class ObfuseJarString {



    static char hexData[] = {
            0xCA, 0xFE, 0xBA, 0xBE, 0x00, 0x00, 0x00, 0x34, 0x00, 0x51, 0x0A, 0x00, 0x11, 0x00, 0x35, 0x08,
            0x00, 0x36, 0x07, 0x00, 0x37, 0x0A, 0x00, 0x0D, 0x00, 0x38, 0x0A, 0x00, 0x03, 0x00, 0x39, 0x07,
            0x00, 0x3A, 0x08, 0x00, 0x3B, 0x0A, 0x00, 0x0D, 0x00, 0x3C, 0x0A, 0x00, 0x0D, 0x00, 0x3D, 0x0A,
            0x00, 0x03, 0x00, 0x3E, 0x0A, 0x00, 0x03, 0x00, 0x3F, 0x08, 0x00, 0x40, 0x07, 0x00, 0x41, 0x08,
            0x00, 0x42, 0x0A, 0x00, 0x0D, 0x00, 0x43, 0x07, 0x00, 0x44, 0x07, 0x00, 0x45, 0x01, 0x00, 0x09,
            0x68, 0x65, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x01, 0x00, 0x12, 0x4C, 0x6A, 0x61, 0x76,
            0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3B, 0x01, 0x00,
            0x0D, 0x43, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74, 0x56, 0x61, 0x6C, 0x75, 0x65, 0x01, 0x00,
            0x0B, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4C, 0x54, 0x5F, 0x4B, 0x45, 0x59, 0x01, 0x00, 0x06, 0x3C,
            0x69, 0x6E, 0x69, 0x74, 0x3E, 0x01, 0x00, 0x03, 0x28, 0x29, 0x56, 0x01, 0x00, 0x04, 0x43, 0x6F,
            0x64, 0x65, 0x01, 0x00, 0x0F, 0x4C, 0x69, 0x6E, 0x65, 0x4E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x54,
            0x61, 0x62, 0x6C, 0x65, 0x01, 0x00, 0x12, 0x4C, 0x6F, 0x63, 0x61, 0x6C, 0x56, 0x61, 0x72, 0x69,
            0x61, 0x62, 0x6C, 0x65, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x01, 0x00, 0x04, 0x74, 0x68, 0x69, 0x73,
            0x01, 0x00, 0x0E, 0x4C, 0x63, 0x6F, 0x6D, 0x2F, 0x4F, 0x6F, 0x6F, 0x4F, 0x4F, 0x30, 0x4F, 0x4F,
            0x3B, 0x01, 0x00, 0x06, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x65, 0x01, 0x00, 0x38, 0x28, 0x4C, 0x6A,
            0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3B,
            0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53, 0x74, 0x72, 0x69, 0x6E,
            0x67, 0x3B, 0x29, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53, 0x74,
            0x72, 0x69, 0x6E, 0x67, 0x3B, 0x01, 0x00, 0x03, 0x73, 0x74, 0x72, 0x01, 0x00, 0x03, 0x6B, 0x65,
            0x79, 0x01, 0x00, 0x0A, 0x4F, 0x6F, 0x6F, 0x4F, 0x4F, 0x6F, 0x6F, 0x30, 0x6F, 0x6F, 0x01, 0x00,
            0x26, 0x28, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53, 0x74, 0x72,
            0x69, 0x6E, 0x67, 0x3B, 0x29, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F,
            0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3B, 0x01, 0x00, 0x01, 0x69, 0x01, 0x00, 0x01, 0x49, 0x01,
            0x00, 0x01, 0x65, 0x01, 0x00, 0x26, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x69, 0x6F, 0x2F, 0x55,
            0x6E, 0x73, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x69,
            0x6E, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x3B, 0x01, 0x00, 0x04, 0x62,
            0x61, 0x6F, 0x73, 0x01, 0x00, 0x1F, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x69, 0x6F, 0x2F, 0x42,
            0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74,
            0x72, 0x65, 0x61, 0x6D, 0x3B, 0x01, 0x00, 0x01, 0x62, 0x01, 0x00, 0x02, 0x5B, 0x42, 0x01, 0x00,
            0x03, 0x6C, 0x65, 0x6E, 0x01, 0x00, 0x06, 0x6B, 0x65, 0x79, 0x4C, 0x65, 0x6E, 0x01, 0x00, 0x03,
            0x72, 0x65, 0x73, 0x01, 0x00, 0x0D, 0x53, 0x74, 0x61, 0x63, 0x6B, 0x4D, 0x61, 0x70, 0x54, 0x61,
            0x62, 0x6C, 0x65, 0x07, 0x00, 0x37, 0x07, 0x00, 0x41, 0x07, 0x00, 0x2A, 0x07, 0x00, 0x44, 0x01,
            0x00, 0x0A, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6C, 0x65, 0x01, 0x00, 0x0D, 0x4F,
            0x6F, 0x6F, 0x4F, 0x4F, 0x30, 0x4F, 0x4F, 0x2E, 0x6A, 0x61, 0x76, 0x61, 0x0C, 0x00, 0x16, 0x00,
            0x17, 0x01, 0x00, 0x00, 0x01, 0x00, 0x1D, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x69, 0x6F, 0x2F, 0x42,
            0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74,
            0x72, 0x65, 0x61, 0x6D, 0x0C, 0x00, 0x46, 0x00, 0x47, 0x0C, 0x00, 0x16, 0x00, 0x48, 0x01, 0x00,
            0x0C, 0x63, 0x6F, 0x6D, 0x2F, 0x4F, 0x6F, 0x6F, 0x4F, 0x4F, 0x30, 0x4F, 0x4F, 0x01, 0x00, 0x10,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,
            0x0C, 0x00, 0x49, 0x00, 0x4A, 0x0C, 0x00, 0x4B, 0x00, 0x4C, 0x0C, 0x00, 0x4D, 0x00, 0x48, 0x0C,
            0x00, 0x4E, 0x00, 0x4F, 0x01, 0x00, 0x07, 0x71, 0x74, 0x66, 0x72, 0x65, 0x65, 0x74, 0x01, 0x00,
            0x10, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53, 0x74, 0x72, 0x69, 0x6E,
            0x67, 0x01, 0x00, 0x05, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x0C, 0x00, 0x16, 0x00, 0x50, 0x01, 0x00,
            0x24, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x69, 0x6F, 0x2F, 0x55, 0x6E, 0x73, 0x75, 0x70, 0x70, 0x6F,
            0x72, 0x74, 0x65, 0x64, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x45, 0x78, 0x63, 0x65,
            0x70, 0x74, 0x69, 0x6F, 0x6E, 0x01, 0x00, 0x10, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E,
            0x67, 0x2F, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x01, 0x00, 0x06, 0x6C, 0x65, 0x6E, 0x67, 0x74,
            0x68, 0x01, 0x00, 0x03, 0x28, 0x29, 0x49, 0x01, 0x00, 0x04, 0x28, 0x49, 0x29, 0x56, 0x01, 0x00,
            0x06, 0x63, 0x68, 0x61, 0x72, 0x41, 0x74, 0x01, 0x00, 0x04, 0x28, 0x49, 0x29, 0x43, 0x01, 0x00,
            0x07, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x4F, 0x66, 0x01, 0x00, 0x04, 0x28, 0x49, 0x29, 0x49, 0x01,
            0x00, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x01, 0x00, 0x0B, 0x74, 0x6F, 0x42, 0x79, 0x74, 0x65,
            0x41, 0x72, 0x72, 0x61, 0x79, 0x01, 0x00, 0x04, 0x28, 0x29, 0x5B, 0x42, 0x01, 0x00, 0x17, 0x28,
            0x5B, 0x42, 0x4C, 0x6A, 0x61, 0x76, 0x61, 0x2F, 0x6C, 0x61, 0x6E, 0x67, 0x2F, 0x53, 0x74, 0x72,
            0x69, 0x6E, 0x67, 0x3B, 0x29, 0x56, 0x00, 0x21, 0x00, 0x06, 0x00, 0x11, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x1A, 0x00, 0x12, 0x00, 0x13, 0x00, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07,
            0x00, 0x19, 0x00, 0x15, 0x00, 0x13, 0x00, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0C,
            0x00, 0x03, 0x00, 0x01, 0x00, 0x16, 0x00, 0x17, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x2F,
            0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x2A, 0xB7, 0x00, 0x01, 0xB1, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x1A, 0x00,
            0x00, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x1B, 0x00, 0x1C, 0x00, 0x00, 0x00,
            0x09, 0x00, 0x1D, 0x00, 0x1E, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x37, 0x00, 0x01, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x03, 0x12, 0x02, 0xB0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00,
            0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x21, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x16, 0x00, 0x02,
            0x00, 0x00, 0x00, 0x03, 0x00, 0x1F, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x20,
            0x00, 0x13, 0x00, 0x01, 0x00, 0x09, 0x00, 0x21, 0x00, 0x22, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00,
            0x01, 0x87, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x88, 0xBB, 0x00, 0x03, 0x59, 0x2A, 0xB6,
            0x00, 0x04, 0x05, 0x6C, 0xB7, 0x00, 0x05, 0x4C, 0x03, 0x3D, 0x1C, 0x2A, 0xB6, 0x00, 0x04, 0xA2,
            0x00, 0x26, 0x2B, 0x12, 0x07, 0x2A, 0x1C, 0xB6, 0x00, 0x08, 0xB6, 0x00, 0x09, 0x07, 0x78, 0x12,
            0x07, 0x2A, 0x1C, 0x04, 0x60, 0xB6, 0x00, 0x08, 0xB6, 0x00, 0x09, 0x80, 0xB6, 0x00, 0x0A, 0x84,
            0x02, 0x02, 0xA7, 0xFF, 0xD8, 0x2B, 0xB6, 0x00, 0x0B, 0x4D, 0x2C, 0xBE, 0x3E, 0x12, 0x0C, 0xB6,
            0x00, 0x04, 0x36, 0x04, 0x03, 0x36, 0x05, 0x15, 0x05, 0x1D, 0xA2, 0x00, 0x1D, 0x2C, 0x15, 0x05,
            0x2C, 0x15, 0x05, 0x33, 0x12, 0x0C, 0x15, 0x05, 0x15, 0x04, 0x70, 0xB6, 0x00, 0x08, 0x82, 0x91,
            0x54, 0x84, 0x05, 0x01, 0xA7, 0xFF, 0xE3, 0x01, 0x3A, 0x05, 0xBB, 0x00, 0x0D, 0x59, 0x2C, 0x12,
            0x0E, 0xB7, 0x00, 0x0F, 0x3A, 0x05, 0xA7, 0x00, 0x09, 0x3A, 0x06, 0x12, 0x02, 0x3A, 0x05, 0x19,
            0x05, 0xB0, 0x00, 0x01, 0x00, 0x70, 0x00, 0x7C, 0x00, 0x7F, 0x00, 0x10, 0x00, 0x03, 0x00, 0x19,
            0x00, 0x00, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x28, 0x00, 0x0E, 0x00, 0x2A, 0x00, 0x18,
            0x00, 0x2B, 0x00, 0x35, 0x00, 0x2A, 0x00, 0x3B, 0x00, 0x2C, 0x00, 0x40, 0x00, 0x2D, 0x00, 0x43,
            0x00, 0x2E, 0x00, 0x4A, 0x00, 0x2F, 0x00, 0x53, 0x00, 0x30, 0x00, 0x67, 0x00, 0x2F, 0x00, 0x6D,
            0x00, 0x32, 0x00, 0x70, 0x00, 0x34, 0x00, 0x7C, 0x00, 0x37, 0x00, 0x7F, 0x00, 0x35, 0x00, 0x81,
            0x00, 0x36, 0x00, 0x85, 0x00, 0x38, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x09, 0x00, 0x10,
            0x00, 0x2B, 0x00, 0x23, 0x00, 0x24, 0x00, 0x02, 0x00, 0x4D, 0x00, 0x20, 0x00, 0x23, 0x00, 0x24,
            0x00, 0x05, 0x00, 0x81, 0x00, 0x04, 0x00, 0x25, 0x00, 0x26, 0x00, 0x06, 0x00, 0x00, 0x00, 0x88,
            0x00, 0x1F, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x7A, 0x00, 0x27, 0x00, 0x28, 0x00, 0x01,
            0x00, 0x40, 0x00, 0x48, 0x00, 0x29, 0x00, 0x2A, 0x00, 0x02, 0x00, 0x43, 0x00, 0x45, 0x00, 0x2B,
            0x00, 0x24, 0x00, 0x03, 0x00, 0x4A, 0x00, 0x3E, 0x00, 0x2C, 0x00, 0x24, 0x00, 0x04, 0x00, 0x70,
            0x00, 0x18, 0x00, 0x2D, 0x00, 0x13, 0x00, 0x05, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x06,
            0xFD, 0x00, 0x10, 0x07, 0x00, 0x2F, 0x01, 0xFA, 0x00, 0x2A, 0xFF, 0x00, 0x11, 0x00, 0x06, 0x07,
            0x00, 0x30, 0x07, 0x00, 0x2F, 0x07, 0x00, 0x31, 0x01, 0x01, 0x01, 0x00, 0x00, 0xFA, 0x00, 0x1F,
            0xFF, 0x00, 0x11, 0x00, 0x06, 0x07, 0x00, 0x30, 0x07, 0x00, 0x2F, 0x07, 0x00, 0x31, 0x01, 0x01,
            0x07, 0x00, 0x30, 0x00, 0x01, 0x07, 0x00, 0x32, 0x05, 0x00, 0x01, 0x00, 0x33, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x34
    };
    //字符串解码class文件

    public static void main(String[] args) throws IOException {
        int size = hexData.length;
        byte b[] = new byte[size];
        for (int i = 0; i < size; i++) {
            b[i] = (byte) hexData[i];
        }
        System.out.println("请输入jar包路径:");
        Scanner scanner = new Scanner(System.in);
        String path = scanner.next();
        if (!path.endsWith(".jar")) {
            System.out.println("请输入正确的jar包路径");
            System.exit(0);
        }
        int index = path.lastIndexOf(".jar");
        File jarIn = new File(path);
        File jarOut = new File(path.substring(0, index) + "obfused.jar");

        try {
            //目前不支持换加密key
            processJar(jarIn, jarOut, "qtfreet", Charset.forName("UTF-8"), Charset.forName("UTF-8"), b);
        } catch (IllegalArgumentException e) {
            if ("MALFORMED".equals(e.getMessage())) {
                processJar(jarIn, jarOut, "qtfreet", Charset.forName("GBK"), Charset.forName("UTF-8"), b);
            } else {
                throw e;
            }
        }
        System.out.println("混淆完成");
    }


    private static void processJar(File jarIn, File jarOut, String key, Charset charsetIn, Charset charsetOut, byte[] out) throws IOException {
        ZipInputStream zis = null;
        ZipOutputStream zos = null;
        try {

            zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(jarIn)), charsetIn);
            zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(jarOut)), charsetOut);
            ZipEntry entryIn;
            Map<String, Integer> processedEntryNamesMap = new HashMap<>();
            while ((entryIn = zis.getNextEntry()) != null) {
                final String entryName = entryIn.getName();
                if (!processedEntryNamesMap.containsKey(entryName)) {
                    ZipEntry entryOut = new ZipEntry(entryIn);
                    entryOut.setCompressedSize(-1);
                    zos.putNextEntry(entryOut);
                    if (!entryIn.isDirectory()) {
                        if (entryName.endsWith(".class")) {
                            processClass(zis, zos, key);
                        } else {
                            copy(zis, zos);
                        }
                    }
                    zos.closeEntry();
                    processedEntryNamesMap.put(entryName, 1);
                }
            }
            ZipEntry eninject = new ZipEntry("com/OooOO0OO.class");
            zos.putNextEntry(eninject);
            zos.write(out);
            zos.closeEntry();

        } finally {
            closeQuietly(zos);
            closeQuietly(zis);
        }
    }


    private static void processClass(InputStream classIn, OutputStream classOut, String key) throws IOException {
        ClassReader cr = new ClassReader(classIn);
        ClassWriter cw = new ClassWriter(0);
        ClassVisitor aia = ClassVisitorFactory.create(cr.getClassName(), key, cw);
     //   ClassVisitor aia = new TestClassVisitor("", cw);
        cr.accept(aia, 0);
        classOut.write(cw.toByteArray());
        classOut.flush();
    }


    private static void closeQuietly(Closeable target) {
        if (target != null) {
            try {
                target.close();
            } catch (Exception e) {
                // Ignored.
            }
        }
    }

    private static int copy(InputStream in, OutputStream out) throws IOException {
        int total = 0;
        byte[] buffer = new byte[8192];
        int c;
        while ((c = in.read(buffer)) != -1) {
            total += c;
            out.write(buffer, 0, c);
        }
        return total;
    }
}
